{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@otjs/state-machine/webpack/universalModuleDefinition","webpack://@otjs/state-machine/webpack/bootstrap","webpack://@otjs/state-machine/webpack/runtime/define property getters","webpack://@otjs/state-machine/webpack/runtime/hasOwnProperty shorthand","webpack://@otjs/state-machine/webpack/runtime/make namespace object","webpack://@otjs/state-machine/../utils/src/errors.ts","webpack://@otjs/state-machine/../utils/src/assert.ts","webpack://@otjs/state-machine/./src/awaiting-with-buffer.ts","webpack://@otjs/state-machine/./src/awaiting-confirm.ts","webpack://@otjs/state-machine/./src/synchronized.ts","webpack://@otjs/state-machine/./src/state-machine.impl.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@otjs/state-machine\"] = factory();\n\telse\n\t\troot[\"@otjs/state-machine\"] = factory();\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* istanbul ignore file */\n\n/**\n * Copyright © 2021 Progyan Bhattacharya\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * See LICENSE file in the root directory for more details.\n */\n\n/**\n * Assertion Error: Error when an Assumption/Assertion Fails.\n */\nexport class AssertionError extends Error {\n  readonly name: string = \"Assertion Failed\";\n}\n\n/**\n * No-op Error: Unexpected method call without any executable code.\n */\nexport class NoopError extends Error {\n  readonly name: string = \"No-op Encountered\";\n  readonly message: string = \"This method should not have been called!\";\n}\n\n/**\n * Invalid Operation Error: Executing an Invalid Operation.\n */\nexport class InvalidOperationError extends Error {\n  readonly name: string = \"Invalid Operation Encountered\";\n  readonly message: string =\n    \"The Operation recieved was either Invalid or Corrupted, please retry!\";\n}\n\n/**\n * Transaction Failure Error: Failed to update some reference in Database.\n */\nexport class TransactionFailureError extends Error {\n  readonly name: string = \"Transaction Failure\";\n  readonly message: string = \"Failed to update in the Database\";\n}\n\n/**\n * DOM Failure Error: Failed to Query or Mutate some DOM Node.\n */\nexport class DOMFailureError extends Error {\n  readonly name: string = \"DOM Operation Failure\";\n  readonly message: string = \"Failed to Query or Mutate some DOM Node\";\n}\n","/**\n * Copyright © 2021 Progyan Bhattacharya\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * See LICENSE file in the root directory for more details.\n */\n\nimport { AssertionError } from \"./errors\";\n\n/**\n * Isomorphic Assertion Function (Works on both Node.JS and Browser)\n * @param statement - Statement of Assertion (Evaluated for Truthy value)\n * @param message - Error Message if Assertion Fails\n */\nexport function assert(\n  statement: boolean | undefined,\n  message: string | Error\n): void {\n  if (statement == null || statement === false) {\n    const err =\n      typeof message === \"string\" ? new AssertionError(message) : message;\n    throw err;\n  }\n}\n","/**\n * Copyright © 2021 Progyan Bhattacharya\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * See LICENSE file in the root directory for more details.\n */\n\nimport { IOperation } from \"@otjs/types\";\nimport { AwaitingConfirm } from \"./awaiting-confirm\";\nimport { IState } from \"./state\";\nimport { IStateMachine } from \"./state-machine\";\n\n/**\n * In the `AwaitingWithBuffer` state, the client is waiting for an operation\n * to be acknowledged by the server while buffering the edits the user makes.\n *\n * @param outstanding - Operation waiting to be Acknowledged by server.\n * @param buffer - Incoming edits from client.\n */\nexport class AwaitingWithBuffer implements IState {\n  protected readonly _outstanding: IOperation;\n  protected readonly _buffer: IOperation;\n\n  constructor(outstanding: IOperation, buffer: IOperation) {\n    // Save the pending operation and the user's edits since then\n    this._outstanding = outstanding;\n    this._buffer = buffer;\n  }\n\n  isSynchronized(): boolean {\n    return false;\n  }\n\n  isAwaitingConfirm(): boolean {\n    return false;\n  }\n\n  isAwaitingWithBuffer(): boolean {\n    return true;\n  }\n\n  applyClient(_client: IStateMachine, operation: IOperation): IState {\n    // Compose the user's changes onto the buffer\n    const newBuffer = this._buffer.compose(operation);\n    return new AwaitingWithBuffer(this._outstanding, newBuffer);\n  }\n\n  applyServer(client: IStateMachine, operation: IOperation): IState {\n    // Operation comes from another client\n    //\n    //                       /\\\n    //     this.outstanding /  \\ operation\n    //                     /    \\\n    //                    /\\    /\n    //       this.buffer /  \\* / pair1[0] (new outstanding)\n    //                  /    \\/\n    //                  \\    /\n    //          pair2[1] \\  / pair2[0] (new buffer)\n    // the transformed    \\/\n    // operation -- can\n    // be applied to the\n    // client's current\n    // document\n    //\n    // * pair1[1]\n\n    const pair1 = this._outstanding.transform(operation);\n    const pair2 = this._buffer.transform(pair1[1]);\n    client.applyOperation(pair2[1]);\n    return new AwaitingWithBuffer(pair1[0], pair2[0]);\n  }\n\n  serverAck(client: IStateMachine): IState {\n    // The pending operation has been acknowledged\n    // => send buffer\n    client.sendOperation(this._buffer);\n    return new AwaitingConfirm(this._buffer);\n  }\n\n  serverRetry(client: IStateMachine): IState {\n    // Merge with our buffer and resend.\n    const outstanding = this._outstanding.compose(this._buffer);\n    client.sendOperation(outstanding);\n    return new AwaitingConfirm(outstanding);\n  }\n}\n","/**\n * Copyright © 2021 Progyan Bhattacharya\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * See LICENSE file in the root directory for more details.\n */\n\nimport { IOperation } from \"@otjs/types\";\nimport { IState } from \"./state\";\nimport { IStateMachine } from \"./state-machine\";\nimport { synchronized } from \"./synchronized\";\nimport { AwaitingWithBuffer } from \"./awaiting-with-buffer\";\n\n/**\n * In the `AwaitingConfirm` state, there's one operation the client has sent\n * to the server and is still waiting for an acknowledgement.\n *\n * @param outstanding - Operation waiting to be Acknowledged by server.\n */\nexport class AwaitingConfirm implements IState {\n  protected readonly _outstanding: IOperation;\n\n  constructor(outstanding: IOperation) {\n    // Save the pending operation\n    this._outstanding = outstanding;\n  }\n\n  isSynchronized(): boolean {\n    return false;\n  }\n\n  isAwaitingConfirm(): boolean {\n    return true;\n  }\n\n  isAwaitingWithBuffer(): boolean {\n    return false;\n  }\n\n  applyClient(_client: IStateMachine, operation: IOperation): IState {\n    // When the user makes an edit, don't send the operation immediately,\n    // instead switch to 'AwaitingWithBuffer' state\n    return new AwaitingWithBuffer(this._outstanding, operation);\n  }\n\n  applyServer(client: IStateMachine, operation: IOperation): IState {\n    // This is another client's operation. Visualization:\n    //\n    //                   /\\\n    // this.outstanding /  \\ operation\n    //                 /    \\\n    //                 \\    /\n    //  pair[1]         \\  / pair[0] (new outstanding)\n    //  (can be applied  \\/\n    //  to the client's\n    //  current document)\n\n    const pair = this._outstanding.transform(operation);\n    client.applyOperation(pair[1]);\n    return new AwaitingConfirm(pair[0]);\n  }\n\n  serverAck(_client: IStateMachine): IState {\n    // The client's operation has been acknowledged\n    // => switch to synchronized state\n    return synchronized;\n  }\n\n  serverRetry(client: IStateMachine): IState {\n    client.sendOperation(this._outstanding);\n    return this;\n  }\n}\n","/**\n * Copyright © 2021 Progyan Bhattacharya\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * See LICENSE file in the root directory for more details.\n */\n\nimport { IOperation } from \"@otjs/types\";\nimport { NoopError } from \"@otjs/utils\";\nimport { AwaitingConfirm } from \"./awaiting-confirm\";\nimport { IState } from \"./state\";\nimport { IStateMachine } from \"./state-machine\";\n\n/**\n * @internal\n * In the `Synchronized` state, there's no pending operation to sync between the server and the client.\n */\nclass Synchronized implements IState {\n  isSynchronized(): boolean {\n    return true;\n  }\n\n  isAwaitingConfirm(): boolean {\n    return false;\n  }\n\n  isAwaitingWithBuffer(): boolean {\n    return false;\n  }\n\n  applyClient(client: IStateMachine, operation: IOperation): IState {\n    // When the user makes an edit, send the operation to the server and\n    // switch to the 'AwaitingConfirm' state\n    client.sendOperation(operation);\n    return new AwaitingConfirm(operation);\n  }\n\n  applyServer(client: IStateMachine, operation: IOperation): IState {\n    // When we receive a new operation from the server, the operation can be\n    // simply applied to the current document\n    client.applyOperation(operation);\n    return this;\n  }\n\n  serverAck(_client: IStateMachine): IState {\n    throw new NoopError();\n  }\n\n  serverRetry(_client: IStateMachine): IState {\n    throw new NoopError();\n  }\n}\n\n/**\n * @internal\n * Singleton instance of `Synchronized` state, there's no pending operation to sync between the server and the client.\n */\nexport const synchronized = new Synchronized();\n","/**\n * Copyright © 2021 Progyan Bhattacharya\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * See LICENSE file in the root directory for more details.\n */\n\nimport { IOperation } from \"@otjs/types\";\nimport { assert, NoopError } from \"@otjs/utils\";\nimport { IState } from \"./state\";\nimport { IStateMachine } from \"./state-machine\";\nimport { synchronized } from \"./synchronized\";\nimport { ITransitionHandler } from \"./transition-handler\";\n\n/**\n * @public\n * State Machine - Handles all incoming and outgoing operations and manages serializability to keep content synced acorss all clients.\n *\n * @param handler - Handler for invoking side-effects in outside world.\n */\nexport class StateMachine implements IStateMachine {\n  protected _state: IState = synchronized;\n  protected _handler: ITransitionHandler | null;\n\n  constructor(handler: ITransitionHandler) {\n    this._handler = handler;\n  }\n\n  dispose() {\n    this._handler = null;\n  }\n\n  isSynchronized(): boolean {\n    return this._state.isSynchronized();\n  }\n\n  isAwaitingConfirm(): boolean {\n    return this._state.isAwaitingConfirm();\n  }\n\n  isAwaitingWithBuffer(): boolean {\n    return this._state.isAwaitingWithBuffer();\n  }\n\n  protected _setState(state: IState): void {\n    this._state = state;\n  }\n\n  applyClient(operation: IOperation): void {\n    this._setState(this._state.applyClient(this, operation));\n  }\n\n  applyServer(operation: IOperation): void {\n    this._setState(this._state.applyServer(this, operation));\n  }\n\n  serverAck(): void {\n    this._setState(this._state.serverAck(this));\n  }\n\n  serverRetry(): void {\n    this._setState(this._state.serverRetry(this));\n  }\n\n  applyOperation(operation: IOperation): void {\n    assert(\n      this._handler != null,\n      new NoopError(\n        \"Can not call `applyOperation` after state machine have been disposed!\"\n      )\n    );\n    this._handler!.applyOperation(operation);\n  }\n\n  sendOperation(operation: IOperation): void {\n    assert(\n      this._handler != null,\n      new NoopError(\n        \"Can not call `sendOperation` after state machine have been disposed!\"\n      )\n    );\n    this._handler!.sendOperation(operation);\n  }\n}\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","name","Error","message","assert","statement","AssertionError","outstanding","buffer","_outstanding","_buffer","isSynchronized","isAwaitingConfirm","isAwaitingWithBuffer","applyClient","_client","operation","newBuffer","compose","AwaitingWithBuffer","applyServer","client","pair1","transform","pair2","applyOperation","serverAck","sendOperation","AwaitingConfirm","serverRetry","pair","NoopError","handler","_state","_handler","dispose","_setState","state"],"sourceRoot":""}
/**
 * Copyright © 2021 Progyan Bhattacharya
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * See LICENSE file in the root directory for more details.
 */
/**
 * @public
 * Base Interface - This exposes APIs to identify the current state from outside world.
 */
export declare interface IBase {
    /**
     * Tests whether the Client State is Synchronized with Server or not.
     */
    isSynchronized(): boolean;
    /**
     * Tests whether the Client State is Waiting for Acknowledgement with Server or not.
     */
    isAwaitingConfirm(): boolean;
    /**
     * Tests whether the Client State is Waiting for Acknowledgement with Server along with pending Operation or not.
     */
    isAwaitingWithBuffer(): boolean;
}

/**
 * Copyright © 2021 Progyan Bhattacharya
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * See LICENSE file in the root directory for more details.
 */

/**
 * @internal
 * Disposable Interface - Classes with side-effect should extend this interface to add additional cleanup rules.
 * Applicable to the Interfaces/Objects that requires cleanup after usage.
 */
export declare interface IDisposable {
    /**
     * Cleanup Method.
     */
    dispose(): void;
}

/**
 * Copyright © 2021 Progyan Bhattacharya
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * See LICENSE file in the root directory for more details.
 */

/**
 * @public
 * Base Interface for any Operational Transformation.
 */
export declare interface IOperation {
    /**
     * Compose merges two consecutive operations into one operation, that
     * preserves the changes of both. Or, in other words, for each input string S
     * and a pair of consecutive operations A and B,
     * apply(apply(S, A), B) = apply(S, compose(A, B)) must hold.
     * @param operation - Consecutive Operation to be composed with.
     */
    compose(operation: IOperation): IOperation;
    /**
     * Transform of `A` takes another concurrent operation `B` and
     * produces two operations `A'` and `B'` (in an array) such that
     * `apply(apply(S, A), B') = apply(apply(S, B), A')`.
     * @param operation - Concurrent Operation to be composed with.
     */
    transform(operation: IOperation): [IOperation, IOperation];
}

/**
 * @public
 * State Interface - Interface for all internal States of the State Machine
 */
export declare interface IState extends IBase {
    /**
     * Send operation to remote users.
     * @param client - State Machine object reference.
     * @param operation - Operation from Client.
     * @returns Resultant State.
     */
    applyClient(client: IStateMachine, operation: IOperation): IState;
    /**
     * Recieve operation from remote user.
     * @param client - State Machine object reference.
     * @param operation - Operation recieved from Server.
     * @returns Resultant State.
     */
    applyServer(client: IStateMachine, operation: IOperation): IState;
    /**
     * Handle acknowledgement from Server.
     * @param client - State Machine object reference.
     * @returns Resultant State.
     */
    serverAck(client: IStateMachine): IState;
    /**
     * Handle retry with Server.
     * @param client - State Machine object reference.
     * @returns Resultant State.
     */
    serverRetry(client: IStateMachine): IState;
}

/**
 * @public
 * State Machine Interface - Handles all incoming and outgoing operations and manages serializability to keep content synced acorss all clients.
 */
export declare interface IStateMachine extends IBase, IDisposable {
    /**
     * Send operation to remote users.
     * @param operation - Operation from Client.
     */
    applyClient(operation: IOperation): void;
    /**
     * Recieve operation from remote user.
     * @param operation - Operation recieved from Server.
     */
    applyServer(operation: IOperation): void;
    /**
     * Handle acknowledgement from Server.
     */
    serverAck(): void;
    /**
     * Handle retry with Server.
     */
    serverRetry(): void;
    /**
     * Send operation to Server.
     * @param operation - Operation recieved from Client.
     */
    sendOperation(operation: IOperation): void;
    /**
     * Apply operation in Client.
     * @param operation - Operation recieved from Server.
     */
    applyOperation(operation: IOperation): void;
}

/**
 * @public
 * Transition Handler Interface - Handles side-effects of State transition in outside world.
 */
export declare interface ITransitionHandler {
    /**
     * Send operation to Server.
     * @param operation - Operation recieved from Client.
     */
    sendOperation(operation: IOperation): void;
    /**
     * Apply operation in Client.
     * @param operation - Operation recieved from Server.
     */
    applyOperation(operation: IOperation): void;
}

/**
 * @public
 * State Machine - Handles all incoming and outgoing operations and manages serializability to keep content synced acorss all clients.
 *
 * @param handler - Handler for invoking side-effects in outside world.
 */
export declare class StateMachine implements IStateMachine {
    protected _state: IState;
    protected _handler: ITransitionHandler | null;
    constructor(handler: ITransitionHandler);
    dispose(): void;
    isSynchronized(): boolean;
    isAwaitingConfirm(): boolean;
    isAwaitingWithBuffer(): boolean;
    protected _setState(state: IState): void;
    applyClient(operation: IOperation): void;
    applyServer(operation: IOperation): void;
    serverAck(): void;
    serverRetry(): void;
    applyOperation(operation: IOperation): void;
    sendOperation(operation: IOperation): void;
}

export { }
